#macro(aclHostServiceHTTP $endpointName $serviceName)##
#if($endpointName == "kodokojo" && ($serviceName == "back" || $serviceName == "ui"))##
  acl host_${endpointName}_${serviceName} hdr_beg(host) -i ${envName}
#else##
  acl host_${endpointName}_${serviceName} hdr_beg(host) -i ${serviceName}-${endpointName}
#end##
#end
##
#macro(frontServiceHTTP $endpointName $serviceName)##
  use_backend ${endpointName}-${serviceName}-cluster-http if host_${endpointName}_${serviceName}
##
#end##
#macro(frontServiceWS $endpointName $serviceName)##
  use_backend ${endpointName}-${serviceName}-cluster-wss if host_${endpointName}_${serviceName} hdr_connection_upgrade hdr_upgrade_websocket
##
#end##
#macro(backendServiceHTTPS $endpointName $serviceName $services)##
backend ${endpointName}-${serviceName}-cluster-http
  mode    http
  redirect scheme https if !{ ssl_fc }
  balance leastconn
#set($index = 0)##
#foreach($service in $services)##
#if($service.getPortDefinition().getType() == "HTTPS" || $service.getPortDefinition().getType() == "HTTP")##
#set($index = $index+1)##
  server ${endpointName}-${serviceName}-http-${index} ${service.getHost()}:${service.getPort()} check
#end##
#end##

#end##
#macro(backendServiceWSS $endpointName $serviceName $services)##
backend ${endpointName}-${serviceName}-cluster-wss
  balance source
  # websocket protocol validation
  acl hdr_connection_upgrade hdr(Connection)                 -i upgrade
  acl hdr_upgrade_websocket  hdr(Upgrade)                    -i websocket
  acl hdr_websocket_key      hdr_cnt(Sec-WebSocket-Key)      eq 1
  acl hdr_websocket_version  hdr_cnt(Sec-WebSocket-Version)  eq 1
  http-request deny if ! hdr_connection_upgrade ! hdr_upgrade_websocket ! hdr_websocket_key ! hdr_websocket_version

#set($index = 0)##
#foreach($service in $services)##
#if($service.getPortDefinition().getType() == "WSS")##
#set($index = $index+1)##
  server ${endpointName}-${serviceName}-wss-${index} ${service.getHost()}:${service.getPort()} maxconn 30000 weight 10 cookie ${endpointName}-${serviceName}-wss-${index} check
#end##
#end##

#end##
#macro(frontServiceSSH $endpointName $serviceName $portIndex)##
#set($sshPort = $portIndex + $initialSshPort)##
frontend ${endpointName}-${serviceName}-ssh-in
  mode tcp
  bind    *:${sshPort}
  default_backend ${endpointName}-${serviceName}-cluster-ssh
#end##
#macro(frontServiceTCP $endpointName $serviceName $tcpPort)##
frontend ${endpointName}-${serviceName}-tcp-in
  mode tcp
  bind    *:${tcpPort}
  default_backend ${endpointName}-${serviceName}-cluster-tcp
#end##
##
#macro(backendServiceTCP $type $endpointName $serviceName $services)##
backend ${endpointName}-${serviceName}-cluster-${type.toLowerCase()}
  mode    tcp
#set($index = 0)##
#foreach($service in $services)##
#if($service.getPortDefinition().getType() == $type.toUpperCase())##
#set($index = $index+1)##
  server ${endpointName}-${serviceName}-${type}-${index} ${service.getHost()}:${service.getPort()} check port ${service.getPort()}
#end##
#end##

#end##
##
#macro(aclProjectHTTP $endpoint)##
#foreach($serviceName in $endpoint.getHTTPServiceNames())##
#aclHostServiceHTTP($endpoint.getName() $serviceName)##
#end##
#end##
#macro(aclProjectHTTPS $endpoint)##
#foreach($serviceName in $endpoint.getHTTPSServiceNames())##
#aclHostServiceHTTP($endpoint.getName() $serviceName)##
#end##
#end##
#macro(aclProjectWSS $endpoint)##
#set($httpsServices = $endpoint.getHTTPSServiceNames())##
#foreach($serviceName in $endpoint.getServiceNameByType("WSS"))##
#if(!$httpsServices.contains($serviceName))
#aclHostServiceHTTP($endpoint.getName() $serviceName)##
#end
#end##
#end##
#macro(aclProjectSSH $endpoint)##
#set($httpsServices = $endpoint.getHTTPServiceNames())##
#foreach($serviceName in $endpoint.getServiceNameByType("SSH"))##
#if(!$httpsServices.contains($serviceName))##
#aclHostServiceHTTP($endpoint.getName() $serviceName)##
#end##
#end##
#end##
#macro(aclProjectOther $endpoint)##
#set($httpsServices = $endpoint.getHTTPServiceNames())##
#foreach($serviceName in $endpoint.getServiceNameByType("OTHER"))##
#if(!$httpsServices.contains($serviceName))
#aclHostServiceHTTP($endpoint.getName() $serviceName)##
#end
#end##
#end##
#macro(frontProjectHTTP $endpoint)##
# ${endpoint.getName()} HTTP configuration
#foreach($serviceName in $endpoint.getServiceNames("HTTPS", null ))##
#frontServiceHTTP($endpoint.getName() $serviceName)##
#end##
#end##
#macro(frontProjectHTTPS $endpoint)##
# ${endpoint.getName()} HTTPS configuration
#foreach($serviceName in $endpoint.getOnlyHTTPSServiceNames())##
#frontServiceHTTP($endpoint.getName() $serviceName)##
#end##
#end##
#macro(backendProjectHTTPS $endpoint)##
# ${endpoint.getName()} HTTPS backend configuration
#set($serviceNames  = $endpoint.getServiceNameByType("HTTPS"))##
#foreach($serviceNameType in $serviceNames)##
#foreach($serviceName in $endpoint.getServiceNames("HTTPS", $serviceNameType))##
#set($services = $endpoint.getServicesByTypeAndNames("HTTPS", $serviceNameType ))##
#backendServiceHTTPS($endpoint.getName() $serviceName $services)##
#end##
#end##
#end##
##
#macro(backendProjectWSS $endpoint)##
#set($serviceNames  = $endpoint.getServiceNameByType("WSS"))##
#foreach($serviceNameType in $serviceNames)##
#foreach($serviceName in $endpoint.getServiceNames("WSS", $serviceNameType))##
# ${endpoint.getName()} ${serviceName} WSS backend configuration
#set($services = $endpoint.getServicesByTypeAndNames("WSS", $serviceNameType ))##
#backendServiceWSS($endpoint.getName() $serviceName $services)##
#end##
#end##
#end##
##
#macro(frontProjectWSS $endpoint)##
# ${endpoint.getName()} WSS configuration
#foreach($serviceName in $endpoint.getServiceNameByType("WSS"))##
#frontServiceWS($endpoint.getName() $serviceName)##
#end##
#end##
#macro(frontProjectWS $endpoint)##
# ${endpoint.getName()} WS configuration
#foreach($serviceName in $endpoint.getServiceNames("WSS", null))##
#frontServiceWS($endpoint.getName() $serviceName)##
#end##
#foreach($serviceName in $endpoint.getServiceNames("WS", null))##
#frontServiceWS($endpoint.getName() $serviceName)##
#end##
#end##
##
#macro(backendProjectTCP $type $endpoint)##
# ${endpoint.getName()} ${type} backend configuration
#set($serviceNames  = $endpoint.getServiceNameByType($type))##
#foreach($serviceNameType in $serviceNames)##
#  ServiceNameType ${serviceNameType}
#foreach($serviceName in $endpoint.getServiceNames($type, $serviceNameType))##
#set($services = $endpoint.getServicesByTypeAndNames($type, $serviceNameType ))##
#backendServiceTCP($type $endpoint.getName() $serviceName $services)##
#end##
#end##
#end##
##
#macro(frontProjectSSH $endpoint)##
# ${endpoint.getName()} SSH configuration
#foreach($serviceName in $endpoint.getServiceNames("SSH", null))##
#frontServiceSSH($endpoint.getName() $serviceName $endpoint.getPortIndex())##
#end##
#end##
##
#macro(frontProjectTCP $endpoint)##
# ${endpoint.getName()} TCP configuration
#foreach($serviceName in $endpoint.getServiceNames("OTHER", $endpoint.getName()))##
#foreach($service in $endpoint.getServices())##
#if($service.getName() == $serviceName && $service.getPortDefinition().getType() == "OTHER")##
#frontServiceTCP($endpoint.getName() $serviceName $service.getPortDefinition().getServicePort())##
#end##
#end##
#end##
#end##
##
#macro(sslCertPath $endpoints)
#foreach($endpoint in $endpoints)
#if($endpoint.getCertificate() != "")
#set($sslCert = "")
#foreach($serviceName in $endpoint.getHTTPSServiceNames())
#set($sslCert = "${sslCert} crt /usr/local/etc/haproxy/ssl/${endpoint.getName()}-${serviceName}.pem ")
#end
${sslCert}##
#end
#end
#end
global
  maxconn 4096
  log ${rsyslogHost}:${rsyslogPort} local0
  tune.ssl.default-dh-param 2048
  ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
  ssl-default-bind-options no-sslv3 no-tls-tickets
  ssl-default-server-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
  ssl-default-server-options no-sslv3 no-tls-tickets

defaults
  mode http
  log global
  option  httplog
  option  http-server-close
  option  dontlognull
  option  redispatch
  option  contstats
  retries 3
  backlog 10000
  timeout client          25s
  timeout connect          5s
  timeout server          25s
  timeout tunnel        3600s
  timeout http-keep-alive  1s
  timeout http-request    15s
  timeout queue           30s
  timeout tarpit          60s
  default-server inter 3s rise 2 fall 3
  option forwardfor

# ------- Frontend
frontend http-in
  log     global
  mode    http
  bind    *:80
  reqadd X-Forwarded-Proto:\ http

#foreach($endpoint in $endpoints)##
#aclProjectHTTPS($endpoint)##
#end##

#foreach($endpoint in $endpoints)##
#frontProjectHTTP($endpoint)##
#end##

  acl host_${envName}_es hdr_beg(host) -i es-${envName}
  acl host_${envName}_kibana hdr_beg(host) -i kibana-${envName}
  acl host_${envName}_sensu hdr_beg(host) -i sensu-${envName}
  acl host_${envName}_uchiwa hdr_beg(host) -i uchiwa-${envName}

  use_backend es-${envName}-cluster-http if host_${envName}_es
  use_backend kibana-${envName}-cluster-http if host_${envName}_kibana
  use_backend sensu-${envName}-cluster-http if host_${envName}_sensu
  use_backend uchiwa-${envName}-cluster-http if host_${envName}_uchiwa

frontend https-in
  log     global
  mode    http
  bind    *:443 ssl #if($sslWildCardCertificate)crt ${sslWildCardCertificate}#else #sslCertPath($endpoints)#end##

  reqadd X-Forwarded-Proto:\ https

  option httplog
  option dontlognull
  option forwardfor
  option http-server-close

##  --- ACL DECLARARTION

  acl hdr_connection_upgrade hdr(Connection)  -i upgrade
  acl hdr_upgrade_websocket  hdr(Upgrade)     -i websocket

  acl host_${envName}_es hdr_beg(host) -i es-${envName}
  acl host_${envName}_kibana hdr_beg(host) -i kibana-${envName}
  acl host_${envName}_sensu hdr_beg(host) -i sensu-${envName}
  acl host_${envName}_uchiwa hdr_beg(host) -i uchiwa-${envName}

#foreach($endpoint in $endpoints)##
#aclProjectWSS($endpoint)##
#end##

#foreach($endpoint in $endpoints)##
#aclProjectHTTPS($endpoint)##
#end##

#foreach($endpoint in $endpoints)##
#aclProjectSSH($endpoint)##
#end##

#foreach($endpoint in $endpoints)##
#aclProjectOther($endpoint)##
#end##

use_backend es-${envName}-cluster-http if host_${envName}_es
use_backend kibana-${envName}-cluster-http if host_${envName}_kibana
use_backend sensu-${envName}-cluster-http if host_${envName}_sensu
use_backend uchiwa-${envName}-cluster-http if host_${envName}_uchiwa

##  --- FRONTEND DECLARARTION
#foreach($endpoint in $endpoints)##
#frontProjectWSS($endpoint)##
#end##

#foreach($endpoint in $endpoints)##
#frontProjectHTTPS($endpoint)##
#end##

#foreach($endpoint in $endpoints)##
#frontProjectSSH($endpoint)##
#end##

#foreach($endpoint in $endpoints)##
#frontProjectTCP($endpoint)##
#end##



listen stats
  mode http
  bind  *:1983
  stats enable
  ##stats hide-version
  stats realm Haproxy\ Statistics
  stats uri /
  stats show-node
  stats auth ${adminLogin}:${adminPassword}

userlist userForOperators
user ${adminLogin} insecure-password ${adminPassword}

# ------- Backend



 #foreach($endpoint in $endpoints)##
 #backendProjectHTTPS($endpoint)##
 #end##

 #foreach($endpoint in $endpoints)##
 #backendProjectWSS($endpoint)##
 #end##

 #foreach($endpoint in $endpoints)##
 #backendProjectTCP("SSH" $endpoint)##
 #end##

 #foreach($endpoint in $endpoints)##
 #backendProjectTCP("OTHER" $endpoint)##
 #end##

backend es-${envName}-cluster-http
  mode    http
  redirect scheme https if !{ ssl_fc }
  acl AuthUserForEs http_auth(userForOperators)
  http-request auth realm ES if !AuthUserForEs
  balance leastconn
  server es-${envName}-http-0 es.${envName}.kodokojo.prv:9200 check

backend kibana-${envName}-cluster-http
  mode    http
  redirect scheme https if !{ ssl_fc }
  acl AuthUserForKibana http_auth(userForOperators)
  http-request auth realm Kibana if !AuthUserForKibana
  balance leastconn
  server kibana-${envName}-http-0 es.${envName}.kodokojo.prv:5601 check

backend sensu-${envName}-cluster-http
  mode    http
  redirect scheme https if !{ ssl_fc }
  acl AuthUserForSensu http_auth(userForOperators)
  http-request auth realm Sensu if !AuthUserForSensu
  balance leastconn
  server sensu-${envName}-http-0 sensu.${envName}.kodokojo.prv:4567 check

backend uchiwa-${envName}-cluster-http
  mode    http
  redirect scheme https if !{ ssl_fc }
  acl AuthUserForUchiwa http_auth(userForOperators)
  http-request auth realm Uchiwa if !AuthUserForUchiwa
  balance leastconn
  server uchiwa-${envName}-http-0 sensu.${envName}.kodokojo.prv:3000 check